# Release workflow for codex-rs.
# To release, follow a workflow like:
# ```
# git tag -a rust-v0.1.0 -m "Release 0.1.0"
# git push origin rust-v0.1.0
# ```

name: rust-release
on:
  push:
    tags:
      - "rust-v*"

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  tag-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Validate tag matches Cargo.toml version
        shell: bash
        run: |
          set -euo pipefail
          echo "::group::Tag validation"

          # 1. Must be a tag and match the regex
          [[ "${GITHUB_REF_TYPE}" == "tag" ]] \
            || { echo "❌  Not a tag push"; exit 1; }
          # Accept plain semver and generic pre-release identifiers (e.g. -fork.1, -rc.1, -alpha, -beta)
          [[ "${GITHUB_REF_NAME}" =~ ^rust-v[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$ ]] \
            || { echo "❌  Tag '${GITHUB_REF_NAME}' doesn't match expected format"; exit 1; }

          # 2. Extract versions
          tag_ver="${GITHUB_REF_NAME#rust-v}"
          cargo_ver="$(grep -m1 '^version' codex-rs/Cargo.toml \
                        | sed -E 's/version *= *"([^"]+)".*/\1/')"

          # 3. Compare
          [[ "${tag_ver}" == "${cargo_ver}" ]] \
            || { echo "❌  Tag ${tag_ver} ≠ Cargo.toml ${cargo_ver}"; exit 1; }

          echo "✅  Tag and Cargo.toml agree (${tag_ver})"
          echo "::endgroup::"

  build:
    needs: tag-check
    name: ${{ matrix.runner }} - ${{ matrix.target }}
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 30
    defaults:
      run:
        working-directory: codex-rs

    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: macos-14
            target: aarch64-apple-darwin
          - runner: macos-14
            target: x86_64-apple-darwin
          - runner: ubuntu-24.04
            target: x86_64-unknown-linux-musl
          - runner: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
          - runner: ubuntu-24.04-arm
            target: aarch64-unknown-linux-musl
          - runner: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
          - runner: windows-latest
            target: x86_64-pc-windows-msvc
          - runner: windows-11-arm
            target: aarch64-pc-windows-msvc

    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@1.89
        with:
          targets: ${{ matrix.target }}

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ${{ github.workspace }}/codex-rs/target/
          key: cargo-${{ matrix.runner }}-${{ matrix.target }}-release-${{ hashFiles('**/Cargo.lock') }}

      - if: ${{ matrix.target == 'x86_64-unknown-linux-musl' || matrix.target == 'aarch64-unknown-linux-musl'}}
        name: Install musl build tools
        run: |
          sudo apt install -y musl-tools pkg-config

      - name: Cargo build
        run: cargo build --target ${{ matrix.target }} --release --bin codex

      - name: Generate third-party license texts (Rust)
        shell: bash
        run: |
          # Working dir is codex-rs; the script lives one level up
          python3 ../scripts/gen_rust_third_party_licenses.py || true

      - name: Stage artifacts
        shell: bash
        run: |
          dest="dist/${{ matrix.target }}"
          mkdir -p "$dest"

          if [[ "${{ matrix.runner }}" == windows* ]]; then
            cp target/${{ matrix.target }}/release/codex.exe "$dest/codex-${{ matrix.target }}.exe"
          else
            cp target/${{ matrix.target }}/release/codex "$dest/codex-${{ matrix.target }}"
          fi

      - if: ${{ matrix.runner == 'windows-11-arm' }}
        name: Install zstd
        shell: powershell
        run: choco install -y zstandard

      - name: Compress artifacts (add notices)
        shell: bash
        run: |
          # Path that contains the uncompressed binaries for the current
          # ${{ matrix.target }}
          dest="dist/${{ matrix.target }}"

          # For compatibility with environments that lack the `zstd` tool we
          # additionally create a `.tar.gz` for all platforms and `.zip` for
          # Windows alongside every single binary that we publish. The end result is:
          #   codex-<target>.zst          (existing)
          #   codex-<target>.tar.gz       (new)
          #   codex-<target>.zip          (only for Windows)

          # Determine the produced binary name
          if [[ "${{ matrix.runner }}" == windows* ]]; then
            base="codex-${{ matrix.target }}.exe"
          else
            base="codex-${{ matrix.target }}"
          fi

          # Copy license/notice files next to the binary for packaging
          # Working directory is codex-rs; root-level files are one directory up.
          cp ../LICENSE "$dest/" || true
          cp ../NOTICE "$dest/" || true
          cp ../THIRD-PARTY-NOTICES.md "$dest/" || true
          cp THIRD-PARTY-LICENSES.txt "$dest/" || true

          # 1. Create tar.gz with binary + notices
          tar -C "$dest" -czf "$dest/${base}.tar.gz" \
            "$base" LICENSE NOTICE THIRD-PARTY-NOTICES.md THIRD-PARTY-LICENSES.txt 2>/dev/null || \
          tar -C "$dest" -czf "$dest/${base}.tar.gz" "$base"

          # 2. Create zip archive for Windows binaries (include notices when present)
          # Must run from inside the dest dir so 7z won't embed the directory path inside the zip.
          if [[ "${{ matrix.runner }}" == windows* ]]; then
            (cd "$dest" && 7z a "${base}.zip" "$base" LICENSE NOTICE THIRD-PARTY-NOTICES.md THIRD-PARTY-LICENSES.txt) || \
            (cd "$dest" && 7z a "${base}.zip" "$base")
          fi

          # 3. Also create .zst (existing behaviour) and remove the original binary
          zstd -T0 -19 --rm "$dest/$base"

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          # Upload the per-binary .zst files as well as the new .tar.gz
          # equivalents we generated in the previous step.
          path: |
            codex-rs/dist/${{ matrix.target }}/*

  release:
    needs: build
    name: release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v4
        with:
          path: dist

      - name: List
        run: ls -R dist/

      - name: Define release name
        id: release_name
        run: |
          # Extract the version from the tag name, which is in the format
          # "rust-v0.1.0".
          version="${GITHUB_REF_NAME#rust-v}"
          echo "name=${version}" >> $GITHUB_OUTPUT

      - name: Compute prerelease flag
        id: pre
        env:
          VERSION: ${{ steps.release_name.outputs.name }}
        run: |
          # Treat only -alpha/-beta/-rc as prerelease. Fork variants like -fork.N are published as normal releases.
          if [[ "${VERSION}" =~ -(alpha|beta|rc) ]]; then
            echo "is_prerelease=true" >> "$GITHUB_OUTPUT"
          else
            echo "is_prerelease=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Stage npm package
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          TMP_DIR="${RUNNER_TEMP}/npm-stage"
          python3 codex-cli/scripts/stage_rust_release.py \
            --release-version "${{ steps.release_name.outputs.name }}" \
            --tmp "${TMP_DIR}"
          mkdir -p dist/npm
          # Produce an npm-ready tarball using `npm pack` and store it in dist/npm.
          # We then rename it to a stable name used by our publishing script.
          (cd "$TMP_DIR" && npm pack --pack-destination "${GITHUB_WORKSPACE}/dist/npm")
          mv "${GITHUB_WORKSPACE}"/dist/npm/*.tgz \
             "${GITHUB_WORKSPACE}/dist/npm/codex-npm-${{ steps.release_name.outputs.name }}.tgz"

      - name: Install git-cliff
        uses: taiki-e/install-action@v2
        with:
          tool: git-cliff

      - name: Generate release notes
        id: gen_notes
        run: |
          set -euo pipefail
          git fetch --tags --force
          current_tag="${{ github.ref_name }}"
          # Previous rust-v* tag by creation time (newest before current, not equal to current)
          prev_tag=$(git for-each-ref --sort=-creatordate --format='%(refname:short)' refs/tags \
            | awk -v cur="$current_tag" '/^rust-v[0-9]/{ if ($0!=cur) { print $0; exit } }')
          if [[ -n "${prev_tag}" ]]; then
            echo "Using ancestor range: ${prev_tag}..${current_tag}"
            git cliff --config ./cliff-release.toml "${prev_tag}..${current_tag}" --output RELEASE_NOTES.md
          else
            echo "No previous rust-v ancestor tag found; generating notes for ${current_tag} only"
            git cliff --config ./cliff-release.toml --tag "${current_tag}" --output RELEASE_NOTES.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ steps.release_name.outputs.name }}
          tag_name: ${{ github.ref_name }}
          files: dist/**
          body_path: RELEASE_NOTES.md
          # Mark as prerelease only for -alpha/-beta/-rc. Publish -fork.* as normal releases.
          prerelease: ${{ steps.pre.outputs.is_prerelease == 'true' }}

      - uses: facebook/dotslash-publish-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: ${{ github.ref_name }}
          config: .github/dotslash-config.json
